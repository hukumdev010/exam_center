AWSTemplateFormatVersion: "2010-09-09"
Description: "Free tier deployment of FastAPI backend on EC2 with RDS PostgreSQL"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  DBUsername:
    Type: String
    Default: examcenter
    Description: Database admin username
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database admin password
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: exam-center-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: exam-center-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: exam-center-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: exam-center-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: exam-center-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: exam-center-private-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: exam-center-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: FastAPI access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: exam-center-web-sg

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
          Description: PostgreSQL access from web server
      Tags:
        - Key: Name
          Value: exam-center-db-sg

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: exam-center-db-subnet-group

  # RDS PostgreSQL Instance (Free Tier)
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: exam-center-db
      DBInstanceClass: db.t3.micro # Free tier eligible
      Engine: postgres
      EngineVersion: "13.22"
      AllocatedStorage: 20 # Free tier allows up to 20GB
      StorageType: gp2
      DBName: examcenter
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0 # Disable backups for free tier
      MultiAZ: false # Single AZ for free tier
      PubliclyAccessible: true
      StorageEncrypted: false # Encryption not available in free tier
      DeleteAutomatedBackups: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: exam-center-database

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: exam-center-ec2-role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance (Free Tier)
  WebServer:
    Type: AWS::EC2::Instance
    DependsOn: Database
    Properties:
      ImageId: ami-0866a3c8686eaeeba # Ubuntu 24.04 LTS AMI (update for your region)
      InstanceType: t2.micro # Free tier eligible
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y software-properties-common curl wget git build-essential
          
          # Install Python 3.10
          apt-get install -y python3.10 python3.10-pip python3.10-venv python3.10-dev
          
          # Make Python 3.10 the default python3
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
          update-alternatives --install /usr/bin/pip3 pip3 /usr/bin/pip3.10 1
          
          # Install PostgreSQL client libraries
          apt-get install -y libpq-dev
          
          # Install Docker
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ubuntu
          
          # Create application directory
          mkdir -p /opt/exam-center
          chown ubuntu:ubuntu /opt/exam-center
          
          # Create environment file with database connection
          cat > /opt/exam-center/.env << 'EOF'
          DATABASE_URL=postgresql+asyncpg://${DBUsername}:${DBPassword}@${Database.Endpoint.Address}:5432/examcenter
          SECRET_KEY=your-secret-key-here-change-this-in-production-$(openssl rand -hex 32)
          ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          DEBUG=false
          ENVIRONMENT=production
          EOF
          
          # Create deployment script
          cat > /opt/exam-center/deploy-from-git.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting code deployment from Git..."
          
          # Change to application directory
          cd /opt/exam-center
          
          # If repository exists, pull latest changes, otherwise clone
          if [ -d "exam_center" ]; then
              echo "Repository exists, pulling latest changes..."
              cd exam_center
              git pull origin main
              cd ..
          else
              echo "Cloning repository..."
              git clone https://github.com/hukumdev010/exam_center.git
          fi
          
          # Copy backend files to main directory
          cp -r exam_center/backend/* .
          
          # Copy frontend build if exists (optional)
          if [ -d "exam_center/frontend/out" ]; then
              cp -r exam_center/frontend/out ./static
          fi
          
          # Install Python dependencies
          echo "Installing Python dependencies..."
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          
          # Run database migrations
          echo "Running database migrations..."
          python3 -m alembic upgrade head
          
          # Restart the service
          echo "Restarting application service..."
          sudo systemctl restart exam-center
          sudo systemctl enable exam-center
          
          echo "Deployment completed successfully!"
          EOF
          
          chmod +x /opt/exam-center/deploy-from-git.sh
          
          # Create systemd service
          cat > /etc/systemd/system/exam-center.service << 'EOF'
          [Unit]
          Description=Exam Center FastAPI Application
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/exam-center
          Environment=PATH=/usr/local/bin:/usr/bin:/bin
          Environment=PYTHONPATH=/opt/exam-center
          ExecStart=/usr/bin/python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Set permissions
          chown -R ubuntu:ubuntu /opt/exam-center
          
          # Enable service (don't start yet, code needs to be deployed first)
          systemctl daemon-reload
          systemctl enable exam-center
          
          # Create welcome script for SSH users
          cat > /home/ubuntu/deploy-app.sh << 'EOF'
          #!/bin/bash
          echo "Welcome to the Exam Center EC2 instance!"
          echo "To deploy your application code, run:"
          echo "sudo /opt/exam-center/deploy-from-git.sh"
          echo ""
          echo "To check application status:"
          echo "sudo systemctl status exam-center"
          echo ""
          echo "To view application logs:"
          echo "sudo journalctl -u exam-center -f"
          EOF
          
          chmod +x /home/ubuntu/deploy-app.sh
          chown ubuntu:ubuntu /home/ubuntu/deploy-app.sh
      Tags:
        - Key: Name
          Value: exam-center-web-server

  # Elastic IP for consistent public IP
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServer
      Tags:
        - Key: Name
          Value: exam-center-eip

Outputs:
  WebServerPublicIP:
    Description: Public IP address of the web server
    Value: !Ref ElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-WebServerPublicIP"

  WebServerPublicDNS:
    Description: Public DNS name of the web server
    Value: !GetAtt WebServer.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-WebServerPublicDNS"

  DatabaseEndpoint:
    Description: RDS Database endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpoint"

  ApplicationURL:
    Description: URL of the FastAPI application
    Value: !Sub "http://${ElasticIP}:8000"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL"

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i your-key.pem ubuntu@${ElasticIP}"
